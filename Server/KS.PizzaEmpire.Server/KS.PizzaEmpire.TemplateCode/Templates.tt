<#@ template language="C#" hostspecific="True"#>
<#@ include file="Manager.ttinclude"#>
<#@ include file="ClassDef.ttinclude"#>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#
	var classManager = new ClassOutputManager();
	var manager = Manager.Create(Host, GenerationEnvironment);
    string absolutePath = Host.ResolvePath("dataclasses.txt");
    string contents = File.ReadAllText(absolutePath);
	string [] lines = contents.Split('\n');		
	ClassDef currentDef = null;
	PropertyDef currentPDef = null;

	foreach (string line in lines)
    {		
		string [] tks = line.Split('@');
		string cmd = tks[0];
		for (int i = 1;i < tks.Length;i++)
		{
			tks[i] = tks[i].Trim();
		}
		
		switch (cmd)
		{		
			case "C":		
				currentDef = new ClassDef(tks[1], tks[2], tks[3], tks[4], tks[5]);
				classManager.Defs.Add(currentDef);
				break;
			case "P":
				currentPDef	= new PropertyDef(tks[1], tks[2], tks[3], tks[4]);
				currentDef.Props.Add(currentPDef);
				break;				
		}
	}	

	classManager.Formatters.Add(new BusinessEntityFormatter());
	classManager.Formatters.Add(new APIEntityFormatter());
	classManager.Formatters.Add(new TableEntityFormatter());
	classManager.Formatters.Add(new CacheEntityFormatter());
	//classManager.Formatters.Add(new StorageInformationFormatter());

	foreach(ClassDef cd in classManager.Defs)
	{
		foreach(CodeFormatter cf in classManager.Formatters)
		{
			if (!String.IsNullOrEmpty(cd.Exclusions))
			{
				if (cd.Exclusions.Contains(cf.FormatID))
				{
					continue;
				}
			}

			cf.Bind(classManager, cd);
			manager.StartNewFile(cf.FileName); 
			Write(cf.WriteCode());
			manager.EndBlock();
		}
	}
	manager.StartHeader();
#>
///
/// Code audo generated by a tool other than you.
///
<#
	manager.EndBlock();
	manager.Process(true); 
#>