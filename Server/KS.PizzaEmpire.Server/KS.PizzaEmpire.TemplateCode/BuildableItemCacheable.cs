///
/// Code audo generated by a tool other than you.
///
namespace KS.PizzaEmpire.Business.Cache
{
	using Common.BusinessObjects;
	using Business.ProtoSerializable;
	using ProtoBuf;
	using System;
	using System.Collections.Generic;

	/// <summary>
	/// Represents an item that can be built in the game
	/// </summary>
	[ProtoContract]
	[Serializable]
	public class BuildableItemCacheable : ICacheEntity
	{
		/// <summary>
		/// Creates a new instance of the BuildableItemCacheable class.
		/// </summary>
		public BuildableItemCacheable() { }

		/// <summary>
		/// Identifies the type of the item
		/// </summary>
		[ProtoMember(1)]
		public BuildableItemEnum ItemCode { get; set; }

		/// <summary>
		/// The level required to build the item
		/// </summary>
		[ProtoMember(2)]
		public int RequiredLevel { get; set; }

		/// <summary>
		/// The cost in coins to build the item
		/// </summary>
		[ProtoMember(3)]
		public int CoinCost { get; set; }

		/// <summary>
		/// The item that is required to produce this item
		/// </summary>
		[ProtoMember(4)]
		public BuildableItemEnum ProductionItem { get; set; }

		/// <summary>
		/// The production capacity of the item
		/// </summary>
		[ProtoMember(5)]
		public int ProductionCapacity { get; set; }

		/// <summary>
		/// The base amount of items that are produced when work is completed
		/// </summary>
		[ProtoMember(6)]
		public int BaseProduction { get; set; }

		/// <summary>
		/// The maximum number of items this item can store
		/// </summary>
		[ProtoMember(7)]
		public int StorageCapacity { get; set; }

		/// <summary>
		/// The item this item should be stored in
		/// </summary>
		[ProtoMember(8)]
		public BuildableItemEnum StorageItem { get; set; }

		/// <summary>
		/// Whether the item is used for storage
		/// </summary>
		[ProtoMember(9)]
		public bool IsStorage { get; set; }

		/// <summary>
		/// Whether the item is consumed if required for other items
		/// </summary>
		[ProtoMember(10)]
		public bool IsConsumable { get; set; }

		/// <summary>
		/// Whether work on this item finishes immediately
		/// </summary>
		[ProtoMember(11)]
		public bool IsImmediate { get; set; }

		/// <summary>
		/// Whether doing work subtracts from the quantity of this item
		/// </summary>
		[ProtoMember(12)]
		public bool IsWorkSubtracted { get; set; }

		/// <summary>
		/// The experience gained when this item is built
		/// </summary>
		[ProtoMember(13)]
		public int Experience { get; set; }

		/// <summary>
		/// The number of seconds required to build this item
		/// </summary>
		[ProtoMember(14)]
		public int BuildSeconds { get; set; }

		/// <summary>
		/// The number of coupons required to build this item
		/// </summary>
		[ProtoMember(15)]
		public int CouponCost { get; set; }

		/// <summary>
		/// The number of coupons required to speed up this item
		/// </summary>
		[ProtoMember(16)]
		public int SpeedUpCoupons { get; set; }

		/// <summary>
		/// The number of seconds this item will be sped up by specnding coupons
		/// </summary>
		[ProtoMember(17)]
		public int SpeedUpSeconds { get; set; }

		/// <summary>
		/// The items required to build this item
		/// </summary>
		[ProtoMember(18)]
		public List<ItemQuantity> RequiredItems { get; set; }

	}
}