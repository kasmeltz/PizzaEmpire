<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#+
class ClassDef 
{
	public string ClassName = "";
	public string FileName = "";	
	public string Description = "";	

	public List<PropertyDef> Props = new List<PropertyDef>();

	public string WriteCode(CodeFormatter ft) 
	{
		StringBuilder sb = new StringBuilder();
		sb.AppendLine("///");
		sb.AppendLine("/// Code audo generated by a tool other than you.");
		sb.AppendLine("///");
		sb.Append("namespace ");
		sb.AppendLine(ft.Namespace);
		sb.AppendLine("{");
		foreach(string s in ft.Usings)
		{
			sb.Append("\tusing ");
			sb.Append(s);
			sb.AppendLine(";");
		}
		sb.AppendLine();
		sb.AppendLine("\t/// <summary>");
		sb.Append("\t/// ");
		sb.AppendLine(Description);
		sb.AppendLine("\t/// </summary>");
		foreach(string s in ft.ClassAttrs)
		{
			sb.Append("\t[");
			sb.Append(s);	
			sb.AppendLine("]");
		}
		sb.Append("\tpublic class ");
		sb.Append(ft.ClassName);
		sb.Append(ft.Extends);
		sb.AppendLine("\n\t{");
		sb.AppendLine("\t\t/// <summary>");
		sb.Append("\t\t/// Creates a new instance of the ");
		sb.Append(ft.ClassName);
		sb.AppendLine(" class.");
		sb.AppendLine("\t\t/// </summary>");
		sb.Append("\t\tpublic ");
		sb.Append(ft.ClassName);
		sb.AppendLine("() { }");
		sb.AppendLine(ft.WriteProps());
		sb.AppendLine("\t}");
		sb.Append("}");
		return sb.ToString();
	}
}

class PropertyDef 
{
	public string PropertyName = "";
	public string Description = "";	
	public string PropertyType = "";
	public string Exclusions = "";
}

abstract class CodeFormatter
{
	protected ClassDef cd;

	public string ClassName;
	public string FileName;
	public string Namespace;
	public string Extends;
	public List<string> Usings;
	public List<string> ClassAttrs;
	public Dictionary<string, List<string>> pads;
	public string FormatID;	

	public CodeFormatter() {}	

	public List<string> PropertyAttrs(PropertyDef pd)
	{
		if (pads.ContainsKey(pd.PropertyName))
		{
			return pads[pd.PropertyName];
		}
		return new List<string>();
	}

	public virtual void Bind(ClassDef cd)
	{
		Usings = new List<string>();
		ClassAttrs = new List<string>();
		pads = new Dictionary<string, List<string>>();
		this.cd = cd;
	}

	public virtual string PropertyType(PropertyDef pd)
	{
		return pd.PropertyType;
	}

	public virtual bool IncludeProperty(PropertyDef pd)
	{
		return !pd.Exclusions.Contains(FormatID);
	}

	public virtual string WriteProps()
	{
		StringBuilder sb = new StringBuilder();

		foreach(PropertyDef pd in cd.Props)
		{
			if (IncludeProperty(pd))
			{
				sb.AppendLine();
				sb.AppendLine("\t\t/// <summary>");
				sb.Append("\t\t/// ");
				sb.AppendLine(pd.Description);
				sb.AppendLine("\t\t/// </summary>");
				foreach(string s in PropertyAttrs(pd))
				{
					sb.Append("\t\t[");
					sb.Append(s);	
					sb.AppendLine("]");
				}
				sb.Append("\t\tpublic ");
				sb.Append(PropertyType(pd));
				sb.Append(" ");
				sb.Append(pd.PropertyName);
				sb.AppendLine(" { get; set; }");
			}
		}
		
		return sb.ToString();
	}
}

class BusinessEntityFormatter: CodeFormatter
{
	public BusinessEntityFormatter() : base() {}

	public override void Bind(ClassDef cd)
	{
		base.Bind(cd);
		ClassName = cd.ClassName;
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Common.BusinessObjects";
		Extends = " : IBusinessObjectEntity";
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		FormatID = "B";
	}
}

class APIEntityFormatter: CodeFormatter
{
	public APIEntityFormatter() : base() {}

	public override void Bind(ClassDef cd)
	{
		base.Bind(cd);
		ClassName = cd.ClassName + "API";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Common.APITransfer";
		Extends = " : IAPIEntity";
		Usings.Add("BusinessObjects");
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		FormatID = "A";
	}

	public override string PropertyType(PropertyDef pd)
	{
		if(pd.PropertyType.Contains("Dictionary"))
		{
			return "string";
		}

		return pd.PropertyType;
	}
}

class TableEntityFormatter: CodeFormatter
{
	public TableEntityFormatter() : base() {}

	public override void Bind(ClassDef cd)
	{
		base.Bind(cd);
		ClassName = cd.ClassName + "TableStorage";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Business.TableStorage";
		Extends = " : TableEntity, ITableStorageEntity";
		Usings.Add("Common.BusinessObjects");
		Usings.Add("Microsoft.WindowsAzure.Storage.Table");
		Usings.Add("System");
		FormatID = "T";
	}

	public override string PropertyType(PropertyDef pd)
	{
		if(pd.PropertyType.Contains("List"))
		{
			return "byte[]";
		}

		if(pd.PropertyType.Contains("Dictionary"))
		{
			return "byte[]";
		}

		if(pd.PropertyType.Contains("Enum"))
		{
			return "int";
		}

		return pd.PropertyType;
	}
}

class CacheEntityFormatter: CodeFormatter
{
	public CacheEntityFormatter() : base() {}

	public override void Bind(ClassDef cd)
	{
		base.Bind(cd);
		ClassName = cd.ClassName + "Cacheable";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Business.Cache";
		Extends = " : ICacheEntity";
		Usings.Add("Common.BusinessObjects");
		Usings.Add("Business.ProtoSerializable");
		Usings.Add("ProtoBuf");
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		ClassAttrs.Add("ProtoContract");
		ClassAttrs.Add("Serializable");
		FormatID = "C";

		foreach(PropertyDef pd in cd.Props)
		{
			if (IncludeProperty(pd))
			{
				List<string> s = new List<string>();
				s.Add("ProtoMember(" + (pads.Count+1) + ")");
				pads[pd.PropertyName] = s;
			}
		}
	}
}
#>