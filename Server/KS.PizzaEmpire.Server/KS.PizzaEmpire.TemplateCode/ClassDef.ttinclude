<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#+
class ClassOutputManager
{
	public List<ClassDef> Defs = new List<ClassDef>();
	public List<CodeFormatter> Formatters = new List<CodeFormatter>();
}

class ClassDef 
{
	public ClassDef(string n, string d, string pk, string ck, string e)
	{
		ClassName = n;
		Description = d;
		Exclusions = e;
		CacheName = n;
		PartitionKey = pk;
		CacheKey = ck;
	}

	public string ClassName = "";
	public string Description = "";	
	public string Exclusions = "";
	public string CacheName = "";
	public string PartitionKey = "";
	public string CacheKey = "";
	public string RowKey = "";

	public List<PropertyDef> Props = new List<PropertyDef>();	
}

class PropertyDef 
{	
	public PropertyDef(string n, string t, string d, string e)
	{
		PropertyName = n;
		PropertyType = t;
		Description = d;
		Exclusions = e;
	}

	public string PropertyName = "";
	public string PropertyType = "";
	public string Description = "";	
	public string Exclusions = "";
}

abstract class CodeFormatter
{
	protected ClassDef cd;
	protected ClassOutputManager com;

	public string ClassName;
	public string FileName;
	public string Namespace;
	public string Extends;
	public List<string> Usings;
	public List<string> ClassAttrs;
	public Dictionary<string, List<string>> pads;
	public string FormatID;	
	public Dictionary<string, string> PropTypeTransforms;
	protected int pc = 0;

	public CodeFormatter() {}	

	public List<string> PropertyAttrs(PropertyDef pd)
	{
		if (pads.ContainsKey(pd.PropertyName))
		{
			return pads[pd.PropertyName];
		}
		return new List<string>();
	}

	public virtual void Bind(ClassOutputManager manager, ClassDef cd)
	{
		PropTypeTransforms = new Dictionary<string, string>();
		Usings = new List<string>();
		ClassAttrs = new List<string>();
		pads = new Dictionary<string, List<string>>();
		this.cd = cd;
		com = manager;
		AddPropertyTypeMaps();
		pc = 0;
	}

	public virtual void AddPropertyTypeMaps()
	{
		foreach(PropertyDef pd in cd.Props)
		{
			if (!IncludeProperty(pd))
			{
				continue;
			}

			string pt = pd.PropertyType;
			foreach(ClassDef def in com.Defs)
			{		
				if (def.ClassName == pt)
				{					
					CodeFormatter lm = LikeMe();
					lm.Bind(com, def);
					PropTypeTransforms[pt] = lm.ClassName;
				}

				if (pt.Contains("<" + def.ClassName + ">"))
				{
					CodeFormatter lm = LikeMe();
					lm.Bind(com, def);
					PropTypeTransforms[pt] = pt.Replace("<" + def.ClassName + ">", "<" + lm.ClassName + ">");
				}
			}
		}
	}
	
	public virtual bool IncludeProperty(PropertyDef pd)
	{
		if (String.IsNullOrEmpty(pd.Exclusions))
		{
			return true;
		}

		return !pd.Exclusions.Contains(FormatID);
	}

	public virtual string PropertyType(PropertyDef pd)
	{
		foreach(KeyValuePair<string,string> kvp in PropTypeTransforms)
		{
			if (pd.PropertyType.Contains(kvp.Key))
			{
				return kvp.Value;
			}
		}

		return pd.PropertyType;
	}

	public virtual string WriteBody()
	{
		StringBuilder sb = new StringBuilder();

		foreach(PropertyDef pd in cd.Props)
		{
			if (IncludeProperty(pd))
			{
				sb.AppendLine();
				sb.AppendLine("\t\t/// <summary>");
				sb.Append("\t\t/// ");
				sb.AppendLine(pd.Description);
				sb.AppendLine("\t\t/// </summary>");
				foreach(string s in PropertyAttrs(pd))
				{
					sb.Append("\t\t[");
					sb.Append(s);	
					sb.AppendLine("]");
				}
				sb.Append("\t\tpublic ");
				sb.Append(PropertyType(pd));
				sb.Append(" ");	
				sb.Append(pd.PropertyName);
				sb.AppendLine(" { get; set; }");
				pc++;
			}
		}
		
		return sb.ToString();
	}

	public abstract CodeFormatter LikeMe();

	public string WriteCode()
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("namespace ");
		sb.AppendLine(Namespace);
		sb.AppendLine("{");
		foreach(string s in Usings)
		{
			sb.Append("\tusing ");
			sb.Append(s);
			sb.AppendLine(";");
		}
		sb.AppendLine();
		sb.AppendLine("\t/// <summary>");
		sb.Append("\t/// ");
		sb.AppendLine(cd.Description);
		sb.AppendLine("\t/// </summary>");
		foreach(string s in ClassAttrs)
		{
			sb.Append("\t[");
			sb.Append(s);	
			sb.AppendLine("]");
		}
		sb.Append("\tpublic class ");
		sb.Append(ClassName);
		sb.Append(Extends);
		sb.AppendLine("\n\t{");
		sb.AppendLine("\t\t/// <summary>");
		sb.Append("\t\t/// Creates a new instance of the ");
		sb.Append(ClassName);
		sb.AppendLine(" class.");
		sb.AppendLine("\t\t/// </summary>");
		sb.AppendLine(WriteConstructors());
		sb.Append(WriteBody());
		sb.AppendLine("\t}");
		sb.Append("}");
		return sb.ToString();
	}

	public virtual string WriteConstructors()
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("\t\tpublic ");
		sb.Append(ClassName);
		sb.Append("() { }");
		return sb.ToString();
	}

	public virtual string WritePropConversion(string methodName, PropertyDef pd, CodeFormatter from, CodeFormatter to)
	{
		string fpt = from.PropertyType(pd);
		string tpt = to.PropertyType(pd);
		string cast = string.Empty;

		if (fpt != tpt)
		{
			if (fpt.Contains("Enum") && tpt == "int")
			{
				cast = "int";
			} 

			if (fpt == "int" && tpt.Contains("Enum"))
			{
				cast = tpt;
			} 
		}
		
		// simple equals with or without cast
		if (fpt == tpt || !string.IsNullOrEmpty(cast))
		{
			return WriteCastConversion(pd, cast);
		} 

		// converting to byte array
		if (tpt == "byte[]")
		{			
			return WriteToByteArray(methodName, pd, from, to);
		}

		// converting from byte array
		if (fpt == "byte[]")
		{			
			return WriteFromByteArray(methodName, pd, from, to);
		}
				
		foreach(ClassDef def in com.Defs)
		{		
			if (fpt.Contains(def.ClassName))
			{					
				return WriteConversionList(def, methodName, pd, from, to);		
			}
		}
		
		return "";	
	}
	
	public string WriteCastConversion(PropertyDef pd, string cast)
	{
		StringBuilder sb = new StringBuilder();		
		sb.Append("\t\t\tclone.");
		sb.Append(pd.PropertyName);
		sb.Append(" = ");
		if (!string.IsNullOrEmpty(cast))
		{
			sb.Append("(");
			sb.Append(cast);
			sb.Append(")");
		}
		sb.Append("item.");
		sb.Append(pd.PropertyName);
		sb.AppendLine(";");
		return sb.ToString();
	}

	public string WriteConversionList(ClassDef def, string mn, PropertyDef pd, CodeFormatter from, CodeFormatter to)
	{
		string fpt = from.PropertyType(pd);
		string tpt = to.PropertyType(pd);

		StringBuilder sb = new StringBuilder();

		CodeFormatter lm = LikeMe();
		lm.Bind(com, def);
		string sic = lm.ClassName;
		string ftg = fpt.Replace("List<","").Replace(">","");
		string ttg = tpt.Replace("List<","").Replace(">","");
		string ftv = ftg.Substring(0,2).ToLower();
		string ttv = ttg.Substring(0,2).ToUpper();
		
		sb.Append("\t\t\t");
		sb.Append(tpt);
		sb.Append(" ");
		sb.Append(pd.PropertyName);
		sb.Append(" = new ");
		sb.Append(tpt);
		sb.AppendLine("();");
		sb.Append("\t\t\t");
		sb.Append(sic);
		sb.Append(" ");
		sb.Append("si");
		sb.Append(pc);
		sb.Append(" = new ");
		sb.Append(sic);
		sb.AppendLine("(\"a\");");
		sb.Append("\t\t\tforeach(");
		sb.Append(ftg);
		sb.Append(" ");
		sb.Append(ftv);
		sb.Append(pc);
		sb.Append(" in item.");
		sb.Append(pd.PropertyName);
		sb.AppendLine(")");
		sb.AppendLine("\t\t\t{");
		sb.Append("\t\t\t\t");
		sb.Append(ttg);
		sb.Append(" ");
		sb.Append(ttv);
		sb.Append(pc);
		sb.Append(" = ");
		sb.Append("si");
		sb.Append(pc);
		sb.Append(".");
		sb.Append(mn);
		sb.Append("(");
		sb.Append(ftv);
		sb.Append(pc);
		sb.Append(") as ");
		sb.Append(ttg);
		sb.AppendLine(";");
		sb.Append("\t\t\t\t");
		sb.Append(pd.PropertyName);
		sb.Append(".Add(");
		sb.Append(ttv);
		sb.Append(pc);
		sb.AppendLine(");");
		sb.AppendLine("\t\t\t}");
		
		return sb.ToString();
	}

	public string WriteToByteArray(string mn, PropertyDef pd, CodeFormatter from, CodeFormatter to)
	{
		string fpt = from.PropertyType(pd);
		string tpt = to.PropertyType(pd);

		string serializedItem = "item." + pd.PropertyName;

		StringBuilder sb = new StringBuilder();
		foreach(ClassDef def in com.Defs)
		{		
			if (fpt.Contains(def.ClassName))
			{					
				var fto = new CacheEntityFormatter();
				var lto = new CacheEntityFormatter();
				fto.Bind(com, def);
				lto.Bind(com, def);
				sb.Append(WriteConversionList(def, mn, pd, fto, lto));
				serializedItem = pd.PropertyName;
			}
		}	
		
		sb.AppendLine("\t\t\tusing (MemoryStream memoryStream = new MemoryStream())");
        sb.AppendLine("\t\t\t{");
        sb.Append("\t\t\t\tSerializer.Serialize(memoryStream, ");
		sb.Append(serializedItem);
		sb.AppendLine(");");
        sb.Append("\t\t\t\tclone.");
		sb.Append(pd.PropertyName);
		sb.AppendLine(" = memoryStream.ToArray();");
        sb.AppendLine("\t\t\t}");
		return sb.ToString();
	}

	public string WriteFromByteArray(string mn, PropertyDef pd, CodeFormatter from, CodeFormatter to)
	{
		string fpt = from.PropertyType(pd);
		string tpt = to.PropertyType(pd);

		string serializedItem = "item." + pd.PropertyName;

		StringBuilder sb = new StringBuilder();

		sb.Append("\t\t\tusing (MemoryStream memoryStream = new MemoryStream(item.");
		sb.Append(pd.PropertyName);
		sb.AppendLine("))");
        sb.AppendLine("\t\t\t{");
		sb.Append("\t\t\t\tclone.");
		sb.Append(pd.PropertyName);
		sb.Append(" = Serializer.Deserialize<");
		sb.Append(tpt);
		sb.AppendLine(">(memoryStream);");
        sb.AppendLine("\t\t\t}");
		
		return sb.ToString();
	}

}

class BusinessEntityFormatter: CodeFormatter
{
	public BusinessEntityFormatter() : base() {}

	public override void Bind(ClassOutputManager manager, ClassDef cd)
	{
		base.Bind(manager, cd);
		ClassName = cd.ClassName;
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Common.BusinessObjects";
		Extends = " : IBusinessObjectEntity";
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		FormatID = "B";
	}

	public override CodeFormatter LikeMe()
	{
		return new BusinessEntityFormatter();
	}
}

class APIEntityFormatter: CodeFormatter
{
	public APIEntityFormatter() : base() {}

	public override void Bind(ClassOutputManager manager, ClassDef cd)
	{
		base.Bind(manager, cd);
		ClassName = cd.ClassName + "API";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Common.APITransfer";
		Extends = " : IAPIEntity";
		Usings.Add("BusinessObjects");
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		FormatID = "A";
	}

	public override void AddPropertyTypeMaps()
	{
		PropTypeTransforms["Dictionary"] = "string";
	
		base.AddPropertyTypeMaps();			
	}

	public override CodeFormatter LikeMe()
	{
		return new APIEntityFormatter();
	}
}

class TableEntityFormatter: CodeFormatter
{
	public TableEntityFormatter() : base() {}

	public override void Bind(ClassOutputManager manager, ClassDef cd)
	{
		base.Bind(manager, cd);
		ClassName = cd.ClassName + "TableStorage";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Business.TableStorage";
		Extends = " : TableEntity, ITableStorageEntity";
		Usings.Add("Common.BusinessObjects");
		Usings.Add("Microsoft.WindowsAzure.Storage.Table");
		Usings.Add("System");
		FormatID = "T";		
	}

	public override void AddPropertyTypeMaps()
	{
		PropTypeTransforms["List"] = "byte[]";
		PropTypeTransforms["Dictionary"] = "byte[]";
		PropTypeTransforms["Enum"] = "int";

		base.AddPropertyTypeMaps();			
	}

	public override CodeFormatter LikeMe()
	{
		return new TableEntityFormatter();
	}
}

class CacheEntityFormatter: CodeFormatter
{
	public CacheEntityFormatter() : base() {}

	public override void Bind(ClassOutputManager manager, ClassDef cd)
	{
		base.Bind(manager, cd);
		ClassName = cd.ClassName + "Cacheable";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Business.Cache";
		Extends = " : ICacheEntity";
		Usings.Add("Common.BusinessObjects");
		Usings.Add("ProtoBuf");
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		ClassAttrs.Add("ProtoContract");
		ClassAttrs.Add("Serializable");
		FormatID = "C";

		foreach(PropertyDef pd in cd.Props)
		{
			if (IncludeProperty(pd))
			{
				List<string> s = new List<string>();
				s.Add("ProtoMember(" + (pads.Count+1) + ")");
				pads[pd.PropertyName] = s;
			}
		}
	}

	public override CodeFormatter LikeMe()
	{
		return new CacheEntityFormatter();
	}
}

class StorageInformationFormatter : CodeFormatter
{
	public StorageInformationFormatter() : base() {}

	public override void AddPropertyTypeMaps() { }

	public override void Bind(ClassOutputManager manager, ClassDef cd)
	{
		base.Bind(manager, cd);
		ClassName = cd.ClassName + "StorageInformation";
		FileName = ClassName + ".cs";
		Namespace = "KS.PizzaEmpire.Business.StorageInformation";
		Extends = " : BaseStorageInformation";
		Usings.Add("Cache");
		Usings.Add("TableStorage");
		Usings.Add("Common");
		Usings.Add("Common.BusinessObjects");
		Usings.Add("ProtoBuf");
		Usings.Add("System");
		Usings.Add("System.Collections.Generic");
		Usings.Add("System.IO");
		FormatID = "SI";
	}

	public override CodeFormatter LikeMe()
	{
		return new StorageInformationFormatter();
	}

	public override string WriteConstructors()
	{
		StringBuilder sb = new StringBuilder();
		sb.AppendLine("\t\t /// <param name=\"uniqueKey\"></param>");
		sb.Append("\t\tpublic ");
		sb.Append(ClassName);		
		sb.AppendLine("(string uniqueKey)");
		sb.AppendLine("\t\t\t: base(uniqueKey)");
		sb.AppendLine("\t\t{");
		sb.Append("\t\t\t TableName = \"");
		sb.Append(cd.CacheName);
		sb.AppendLine("\";");
		sb.Append("\t\t\t PartitionKey = ");
		sb.AppendLine(cd.PartitionKey);
		sb.AppendLine("\t\t\t RowKey = uniqueKey;");
		sb.Append("\t\t\t CacheKey = \"");
		sb.Append(cd.CacheKey);
		sb.AppendLine("_\" + uniqueKey;");
		sb.Append("\t\t}");
		return sb.ToString();
	}

	public override string WriteBody()
	{
		StringBuilder sb = new StringBuilder();
		sb.AppendLine();		

		sb.AppendLine(WriteConversionMethod("ICacheEntity ToCache(IBusinessObjectEntity entity)",
			"ToCache", 
			new BusinessEntityFormatter(), new CacheEntityFormatter()));

		sb.AppendLine(WriteConversionMethod("IBusinessObjectEntity FromCache(ICacheEntity entity)", 
			"FromCache",
			new CacheEntityFormatter(), new BusinessEntityFormatter()));

		sb.AppendLine(WriteConversionMethod("ITableStorageEntity ToTableStorage(IBusinessObjectEntity entity)", 
			"ToTableStorage",
			new BusinessEntityFormatter(), new TableEntityFormatter()));

		sb.AppendLine(WriteConversionMethod("IBusinessObjectEntity FromTableStorage(ITableStorageEntity entity)", 
			"FromTableStorage",
			new TableEntityFormatter(), new BusinessEntityFormatter()));

		return sb.ToString();
	}

	public string WriteConversionMethod(string signature, string methodName, CodeFormatter from, CodeFormatter to)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("\t\tpublic override ");
		sb.AppendLine(signature);
		sb.AppendLine("\t\t{");
		sb.Append(WriteConversionBody(methodName, from, to));
		sb.AppendLine("\t\t}");
		return sb.ToString();
	}

	public string WriteConversionBody(string methodName, CodeFormatter from, CodeFormatter to)
	{
		from.Bind(com, cd);
		to.Bind(com, cd);
	
		StringBuilder sb = new StringBuilder();
		sb.Append("\t\t\t");
		sb.Append(from.ClassName);
		sb.Append(" item = entity as ");
		sb.Append(from.ClassName);
		sb.AppendLine(";");
		sb.Append("\t\t\t");
		sb.Append(to.ClassName);
		sb.Append(" clone = new ");
		sb.Append(to.ClassName);
		sb.AppendLine("();");
		foreach(PropertyDef pd in cd.Props)
		{
			sb.Append(WritePropConversion(methodName, pd, from, to));
			pc++;
		}
		sb.AppendLine("\t\t\treturn clone;");
		return sb.ToString();
	}	
}
#>
